#!/bin/sh

# Include build functions used here
. build/config_functions
. build/menu_functions
. build/ansi


# Some requirements:
have_program gcc || exit 1
COMPILE="$PROG_gcc_FILE"


# Define WORDS_BIGENDIAN on bigendian machines
check_endianness


# Libraries used
use_library SDL 1.2.3 || exit 1
use_library SDL_image || exit 1
#have_library vorbis || exit 1
have_library vorbisfile || exit 1


# Add defines for HAVE_STRUPR and STRICMP
define_have_symbol strupr
define_have_symbol stricmp


# Describe the menu:
MENU_main_ITEMS="debug graphics sound link install_path"
MENU_main_TITLE="Main menu"
MENU_main_ITEM_debug_TYPE=CHOICE
MENU_main_ITEM_graphics_TYPE=CHOICE
MENU_main_ITEM_sound_TYPE=CHOICE
MENU_main_ITEM_link_TYPE=CHOICE
MENU_main_ITEM_install_path_TYPE=MENU

CHOICE_debug_OPTIONS="debug nodebug"
CHOICE_debug_TITLE="Include debugging information"
CHOICE_debug_OPTION_debug_TITLE="Debugging information"
CHOICE_debug_OPTION_debug_ACTION='debug_action'
debug_action() {
	CFLAGS="$CFLAGS -g -O0"
	LDFLAGS="$LDFLAGS -O0"
	DEBUG=1
}
CHOICE_debug_OPTION_nodebug_TITLE="No debugging information"
CHOICE_debug_OPTION_nodebug_ACTION='nodebug_action'
nodebug_action() {
	CFLAGS="$CFLAGS -O3"
	DEBUG=0
}
CHOICE_debug_DEFAULT=debug

CHOICE_graphics_OPTIONS="pure opengl"
CHOICE_graphics_TITLE="OpenGL graphics support"
CHOICE_graphics_OPTION_pure_TITLE="Don't include OpenGL graphics support"
CHOICE_graphics_OPTION_pure_ACTION='graphics_pure_action'
graphics_pure_action() {
	CFLAGS="$CFLAGS -DGFXMODULE_SDL"
	HAVE_OPENGL=0
}
CHOICE_graphics_OPTION_opengl_TITLE="Include OpenGL graphics support"
CHOICE_graphics_OPTION_opengl_ACTION='graphics_opengl_action'
CHOICE_graphics_OPTION_opengl_PRECOND="have_library opengl"
graphics_opengl_action() {
	CFLAGS="$CFLAGS -DGFXMODULE_SDL -DHAVE_OPENGL"
	HAVE_OPENGL=1
	use_library opengl
}
CHOICE_graphics_DEFAULT=opengl

CHOICE_sound_OPTIONS="SDL_mixer openal"
CHOICE_sound_TITLE="Sound backend"
CHOICE_sound_OPTION_SDL_mixer_TITLE="Use SDL_mixer for sound"
CHOICE_sound_OPTION_SDL_mixer_PRECOND="have_library SDL_mixer"
CHOICE_sound_OPTION_SDL_mixer_ACTION=sound_sdl_action
sound_sdl_action() {
	CFLAGS="$CFLAGS -DSOUNDMODULE_SDL"
	eval SOUNDMODULE=sdl
	use_library SDL_mixer
}
CHOICE_sound_OPTION_openal_TITLE="Use OpenAL for sound (experimental)"
CHOICE_sound_OPTION_openal_PRECOND="have_library openal"
CHOICE_sound_OPTION_openal_ACTION=sound_openal_action
sound_openal_action() {
	CFLAGS="$CFLAGS -DSOUNDMODULE_OPENAL"
	SOUNDMODULE=openal
	use_library openal
	use_library vorbisfile
#	use_library vorbis
}
CHOICE_sound_DEFAULT=SDL_mixer

CHOICE_link_OPTIONS="static dynamic"
CHOICE_link_TITLE="Linking"
CHOICE_link_OPTION_static_TITLE="Statically linked libraries"
CHOICE_link_OPTION_static_ACTION='eval LDFLAGS="$LDFLAGS -static"'
CHOICE_link_OPTION_dynamic_TITLE="Dynamically linked libraries"
CHOICE_link_DEFAULT=dynamic

MENU_install_path_ITEMS="install_prefix install_bindir install_libdir"
MENU_install_path_TITLE="Installation paths"
MENU_install_path_ITEM_install_prefix_TYPE=INPUT
MENU_install_path_ITEM_install_libdir_TYPE=INPUT
MENU_install_path_ITEM_install_bindir_TYPE=INPUT

INPUT_install_prefix_DEFAULT="/usr/local/games"
INPUT_install_prefix_TITLE="Installation prefix"
INPUT_install_prefix_VALIDATOR=validate_path
INPUT_install_prefix_ACTION='eval INSTALL_PREFIX=$MENU_install_prefix_VALUE'

INPUT_install_bindir_DEFAULT='$prefix/bin'
INPUT_install_bindir_TITLE="Location for binaries"
INPUT_install_bindir_VALIDATOR=validate_path

INPUT_install_libdir_DEFAULT='$prefix/lib'
INPUT_install_libdir_TITLE="Location for libraries"
INPUT_install_libdir_VALIDATOR=validate_path


# Show the menu and let people set things
do_menu main

# Set INSTALL_LIBDIR and INSTALL_BINDIR by to their set values, replacing
# '$prefix' to the prefix set.
prefix="$INPUT_install_prefix_VALUE" \
		eval INSTALL_LIBDIR="${INPUT_install_libdir_VALUE%/}/"
prefix="$INPUT_install_prefix_VALUE" \
		eval INSTALL_BINDIR="${INPUT_install_bindir_VALUE%/}/"

# Set the content dir
CONTENTDIR="${INSTALL_LIBDIR}uqm/content"


# Export the HAVE_ symbols to config.h, using config.h.in as template
SUBSTITUTE_VARS="$HAVE_SYMBOLS CONTENTDIR"
SUBSTITUTE_FILES="src/config.h"
substitute_vars SUBSTITUTE_VARS SUBSTITUTE_FILES
CFLAGS="$CFLAGS -DHAVE_CONFIG_H"

# Make build.vars from build.vars.in, substituting variables.
SUBSTITUTE_VARS="CFLAGS LDFLAGS MAKE DEBUG SOUNDMODULE HAVE_OPENGL \
		INSTALL_LIBDIR INSTALL_BINDIR"
SUBSTITUTE_FILES="build.vars"
substitute_vars SUBSTITUTE_VARS SUBSTITUTE_FILES

